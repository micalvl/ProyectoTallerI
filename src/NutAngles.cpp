/**
 *  @file   NutAngles.cpp
 *  @brief  NutAngles function
 *  @author [Original Author]
 *  @transcribed by Miguel Calvo Le√≥n
 *  @date   2025-04-23
 ***********************************************/

#include "NutAngles.h"

Matrix NutAngles(double Mjd_TT) {
    const int N = 106;
    static const double raw[N][9] = {
            {   0,  0,  0,  0,  1, -1719960, -1742,  920250,   89 },
            {   0,  0,  0,  0,  2,   20620,    2,  -8950,     5 },
            {  -2,  0,  2,  0,  1,     460,    0,  -240,     0 },
            {   2,  0, -2,  0,  0,     110,    0,     0,     0 },
            {  -2,  0,  2,  0,  2,     -30,    0,    10,     0 },
            {   1, -1,  0, -1,  0,     -30,    0,     0,     0 },
            {   0, -2,  2, -2,  1,     -20,    0,    10,     0 },
            {   2,  0, -2,  0,  1,      10,    0,     0,     0 },
            {   0,  0,  2, -2,  2,-131870,  -16,  57360,  -31 },
            {   0,  1,  0,  0,  0,   14260,  -34,    540,   -1 },
            {   0,  1,  2, -2,  2,   -5170,   12,   2240,   -6 },
            {   0, -1,  2, -2,  2,    2170,   -5,   -950,    3 },
            {   0,  0,  2, -2,  1,    1290,    1,   -700,    0 },
            {   2,  0,  0, -2,  0,     480,    0,    10,    0 },
            {   0,  0,  2, -2,  0,    -220,    0,     0,    0 },
            {   0,  2,  0,  0,  0,     170,   -1,     0,    0 },
            {   0,  1,  0,  0,  1,    -150,    0,    90,    0 },
            {   0,  2,  2, -2,  2,    -160,    1,    70,    0 },
            {   0, -1,  0,  0,  1,    -120,    0,    60,    0 },
            {  -2,  0,  0,  2,  1,     -60,    0,    30,    0 },
            {   0, -1,  2, -2,  1,     -50,    0,    30,    0 },
            {   2,  0,  0, -2,  1,      40,    0,   -20,    0 },
            {   0,  1,  2, -2,  1,      40,    0,   -20,    0 },
            {   1,  0,  0, -1,  0,     -40,    0,     0,    0 },
            {   2,  1,  0, -2,  0,      10,    0,     0,    0 },
            {   0,  0, -2,  2,  1,      10,    0,     0,    0 },
            {   0,  1, -2,  2,  0,     -10,    0,     0,    0 },
            {   0,  1,  0,  0,  2,      10,    0,     0,    0 },
            {  -1,  0,  0,  1,  1,      10,    0,     0,    0 },
            {   0,  1,  2, -2,  0,     -10,    0,     0,    0 },
            {   0,  0,  2,  0,  2,   -22740,   -2,   9770,   -5 },
            {   1,  0,  0,  0,  0,    7120,    1,    -70,    0 },
            {   0,  0,  2,  0,  1,   -3860,   -4,   2000,    0 },
            {   1,  0,  2,  0,  2,   -3010,    0,   1290,   -1 },
            {   1,  0,  0, -2,  0,   -1580,    0,    -10,    0 },
            {  -1,  0,  2,  0,  2,    1230,    0,   -530,    0 },
            {   0,  0,  0,  2,  0,     630,    0,    -20,    0 },
            {   1,  0,  0,  0,  1,     630,    1,   -330,    0 },
            {  -1,  0,  0,  0,  1,    -580,   -1,    320,    0 },
            {  -1,  0,  2,  2,  2,    -590,    0,    260,    0 },
            {   1,  0,  2,  0,  1,    -510,    0,    270,    0 },
            {   0,  0,  2,  2,  2,    -380,    0,    160,    0 },
            {   2,  0,  0,  0,  0,     290,    0,    -10,    0 },
            {   1,  0,  2, -2,  2,     290,    0,   -120,    0 },
            {   2,  0,  2,  0,  2,    -310,    0,    130,    0 },
            {   0,  0,  2,  0,  0,     260,    0,    -10,    0 },
            {  -1,  0,  2,  0,  1,     210,    0,    -100,    0 },
            {  -1,  0,  0,  2,  1,     160,    0,    -80,    0 },
            {   1,  0,  0, -2,  1,    -130,    0,     70,    0 },
            {  -1,  0,  2,  2,  1,    -100,    0,     50,    0 },
            {   1,  1,  0, -2,  0,     -70,    0,      0,    0 },
            {   0,  1,  2,  0,  2,      70,    0,    -30,    0 },
            {   0, -1,  2,  0,  2,     -70,    0,     30,    0 },
            {   1,  0,  2,  2,  2,     -80,    0,     30,    0 },
            {   1,  0,  0,  2,  0,      60,    0,      0,    0 },
            {   2,  0,  2, -2,  2,      60,    0,    -30,    0 },
            {   0,  0,  0,  2,  1,     -60,    0,     30,    0 },
            {   0,  0,  2,  2,  1,     -70,    0,     30,    0 },
            {   1,  0,  2, -2,  1,      60,    0,     -30,    0 },
            {   0,  0,  0, -2,  1,     -50,    0,     30,    0 },
            {   1, -1,  0,  0,  0,      50,    0,      0,    0 },
            {   2,  0,  2,  0,  1,     -50,    0,     30,    0 },
            {   0,  1,  0, -2,  0,     -40,    0,      0,    0 },
            {   1,  0, -2,  0,  0,      40,    0,      0,    0 },
            {   0,  0,  0,  1,  0,     -40,    0,      0,    0 },
            {   1,  1,  0,  0,  0,     -30,    0,      0,    0 },
            {   1,  0,  2,  0,  0,      30,    0,      0,    0 },
            {   1, -1,  2,  0,  2,     -30,    0,     10,    0 },
            {  -1, -1,  2,  2,  2,     -30,    0,     10,    0 },
            {  -2,  0,  0,  0,  1,     -20,    0,     10,    0 },
            {   3,  0,  2,  0,  2,     -30,    0,     10,    0 },
            {   0, -1,  2,  2,  2,     -30,    0,     10,    0 },
            {   1,  1,  2,  0,  2,      20,    0,    -10,    0 },
            {  -1,  0,  2, -2,  1,     -20,    0,     10,    0 },
            {   2,  0,  0,  0,  1,      20,    0,    -10,    0 },
            {   1,  0,  0,  0,  2,     -20,    0,     10,    0 },
            {   3,  0,  0,  0,  0,      20,    0,      0,    0 },
            {   0,  0,  2,  1,  2,      20,    0,    -10,    0 },
            {  -1,  0,  0,  0,  2,      10,    0,    -10,    0 },
            {   1,  0,  0, -4,  0,     -10,    0,      0,    0 },
            {  -2,  0,  2,  2,  2,      10,    0,    -10,    0 },
            {  -1,  0,  2,  4,  2,     -20,    0,     10,    0 },
            {   2,  0,  0, -4,  0,     -10,    0,      0,    0 },
            {   1,  1,  2, -2,  2,      10,    0,    -10,    0 },
            {   1,  0,  2,  2,  1,     -10,    0,     10,    0 },
            {  -2,  0,  2,  4,  2,     -10,    0,     10,    0 },
            {  -1,  0,  4,  0,  2,      10,    0,      0,    0 },
            {   1, -1,  0, -2,  0,      10,    0,      0,    0 },
            {   2,  0,  2, -2,  1,      10,    0,    -10,    0 },
            {   2,  0,  2,  2,  2,     -10,    0,      0,    0 },
            {   1,  0,  0,  2,  1,     -10,    0,      0,    0 },
            {   0,  0,  4, -2,  2,      10,    0,      0,    0 },
            {   3,  0,  2, -2,  2,      10,    0,      0,    0 },
            {   1,  0,  2, -2,  0,     -10,    0,      0,    0 },
            {   0,  1,  2,  0,  1,      10,    0,      0,    0 },
            {  -1, -1,  0,  2,  1,      10,    0,      0,    0 },
            {   0,  0, -2,  0,  1,     -10,    0,      0,    0 },
            {   0,  0,  2, -1,  2,     -10,    0,      0,    0 },
            {   0,  1,  0,  2,  0,     -10,    0,      0,    0 },
            {   1,  0, -2, -2,  0,     -10,    0,      0,    0 },
            {   0, -1,  2,  0,  1,     -10,    0,      0,    0 },
            {   1,  1,  0, -2,  1,     -10,    0,      0,    0 },
            {   1,  0, -2,  2,  0,     -10,    0,      0,    0 },
            {   2,  0,  0,  2,  0,      10,    0,      0,    0 },
            {   0,  0,  2,  4,  2,     -10,    0,      0,    0 },
            {   0,  1,  0,  1,  0,      10,    0,      0,    0 }
    };
    Matrix C = Matrix::zeros(N, 9);
    for (int i = 0; i < N; ++i)
        for (int j = 0; j < 9; ++j)
            C(i+1, j+1) = raw[i][j];

    double T  = (Mjd_TT - MJD_J2000) / 36525.0;
    double T2 = T*T;
    double T3 = T2*T;
    double rev = 360.0 * 3600.0;

    double l  = fmod(485866.733 + (1325.0*rev + 715922.633)*T +   31.310*T2 -   0.064*T3, rev);
    double lp = fmod(1287099.804 + (  99.0*rev +1292581.224)*T -    0.577*T2 -   0.012*T3, rev);
    double F  = fmod(335778.877 + (1342.0*rev +295263.137)*T -   13.257*T2 +   0.011*T3, rev);
    double D  = fmod(1072261.307 + (1236.0*rev +1105601.328)*T -    6.891*T2 +   0.019*T3, rev);
    double Om = fmod(450160.280 - (   5.0*rev +482890.539)*T +    7.455*T2 +   0.008*T3, rev);

    double dpsi = 0.0, deps = 0.0;
    for (int i = 1; i <= N; ++i) {
        double arg = (
                             C(i,1)*l + C(i,2)*lp + C(i,3)*F +
                             C(i,4)*D + C(i,5)*Om
                     ) / Arcs;

        dpsi += (C(i,6) + C(i,7)*T) * sin(arg);
        deps += (C(i,8) + C(i,9)*T) * cos(arg);
    }

    dpsi = 1e-5 * dpsi / Arcs;
    deps = 1e-5 * deps / Arcs;

    Matrix out(2,1);
    out(1,1) = dpsi;
    out(2,1) = deps;
    return out;
}





